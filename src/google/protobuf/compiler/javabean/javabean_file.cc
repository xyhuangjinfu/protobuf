#include <google/protobuf/compiler/javabean/javabean_file.h>

#include <google/protobuf/compiler/javabean/javabean_message.h>
#include <google/protobuf/compiler/javabean/javabean_enum.h>
#include <google/protobuf/compiler/javabean/javabean_helpers.h>


namespace google {
namespace protobuf {
namespace compiler {
namespace javabean {

void GenerateJavaBeanFile(const FileDescriptor* file_descriptor, io::Printer* printer) {
	std::map<std::string, std::string> variables;
	variables["file_name"] = file_descriptor->name();
	variables["class_name"] = GetClassName(file_descriptor);
	variables["package_name"] = GetPackageName(file_descriptor);

	printer->Print(variables,
								 "// Generated by the protocol buffer compiler.  DO NOT EDIT!\n"
								 "// source: $file_name$\n\n");

	if (!GetPackageName(file_descriptor).empty()) {
		printer->Print(variables, "package $package_name$;\n\n");
	}

	printer->Print(variables, "public final class $class_name$ {\n\n");

	printer->Indent();

	for (int i = 0; i < file_descriptor->message_type_count(); i++) {
		const Descriptor* d = file_descriptor->message_type(i);
		GenerateMessageClass(d, printer);
	}

	for (int i = 0; i < file_descriptor->enum_type_count(); i++) {
		const EnumDescriptor* d = file_descriptor->enum_type(i);
		GenerateEnumClass(d, printer);
	}

	printer->Outdent();
	printer->Print("}");
}

}  // namespace javabean
}  // namespace compiler
}  // namespace protobuf
}  // namespace google
